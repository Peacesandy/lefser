getwd()
se
#'
#' @description
#' The function calculates the column totals and divides each value within the
#' column by the respective column total.
#'
#' @inheritParams lefser
#'
#' @param se A SummarizedExperiment object with counts
#'
#'
data(zeller14)
#'     assays = list(
#'         counts = matrix(
#'             rep(1, 4), ncol = 1, dimnames = list(LETTERS[1:4], "SAMP")
#'         )
#'     )
#' )
#' assay(se)
#' assay(relativeAb(se))
#'
#' @export
relativeAb <- function(se, assay = 1L) {
assay_data <- assay(se, i = assay)
csums <- colSums(assay_data)
div <- matrix(rep(csums, each = nrow(assay_data)), ncol = ncol(assay_data))
res <- assay_data / div * 1e6
assaylist <- assays(se)
newalist <- append(
assaylist, values = S4Vectors::SimpleList(rel_abs = res), after = 0L
)
assays(se) <- newalist
se
}
se <- lefser(zeller14ra, groupCol = "study_condition")
install.packages("lefser")
remotes::install_github("waldronlab/lefser")
library(lefser)
assays(se) <- newalist
restartSession()
assay_data <- assay(se, i = assay)
@export
@export
#'         counts = matrix(
#'             rep(1, 4), ncol = 1, dimnames = list(LETTERS[1:4], "SAMP")
#'         )
#'     )
#' )
#' assay(se)
#' assay(relativeAb(se))
#'
#'
#'
relativeAb <- function(se, assay = 1L) {
assay_data <- assay(se, i = assay)
csums <- colSums(assay_data)
div <- matrix(rep(csums, each = nrow(assay_data)), ncol = ncol(assay_data))
res <- assay_data / div * 1e6
assaylist <- assays(se)
newalist <- append(
assaylist, values = S4Vectors::SimpleList(rel_abs = res), after = 0L
)
assays(se) <- newalist
se
}
assaylist <- assays(se)
newalist <- append(
assaylist, values = S4Vectors::SimpleList(rel_abs = res), after = 0L
)
assaylist <- assays(se) * 1e6
# Display the modified assay
assay(se)
assays(se) <- newalist
#'     assays = list(
#'         counts = matrix(
#'             rep(1, 4), ncol = 1, dimnames = list(LETTERS[1:4], "SAMP")
#'         )
#'     )
#' )
#' assay(se)
#' assay(relativeAb(se))
#'
#' @export
relativeAb <- function(se, assay = 1L) {
# Extract the assay_data
assay_data <- assay(se, i = assay)
# Calculate column sums
csums <- colSums(assay_data)
# Calculate the relative abundances
res <- assay_data / csums
# Multiply each matrix in assays by 1e6
assaylist <- assays(se)
for (i in seq_along(assaylist)) {
assaylist[[i]] <- assaylist[[i]] * 1e6
}
# Append the new assay to the assays list
newalist <- append(
assaylist,
values = S4Vectors::SimpleList(rel_abs = res),
after = 0L
)
# Update the assays in the SummarizedExperiment object
assays(se) <- newalist
# Return the modified SummarizedExperiment object
se
}
getwd()
library(testthat)
test_dir("C:/Users/DELL/Desktop/bugSigSimple/lefser/tests/testthat/")
# Return the modified SummarizedExperiment object
se
View(relativeAb)
View(relativeAb)
View(zeller14)
se <- SummarizedExperiment(
assays = list(
counts = matrix(
rep(1, 4), ncol = 1, dimnames = list(LETTERS[1:4], "SAMP")
)
)
)
assay(se)
assay(relativeAb(se))
View(relativeAb)
View(zeller14)
getwd()
library(testthat)
test_dir("C:/Users/DELL/Desktop/bugSigSimple/lefser/tests/testthat/")
